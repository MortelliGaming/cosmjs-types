import { Timestamp } from "../../../google/protobuf/timestamp";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../binary";
export declare const protobufPackage = "osmosis.gamm.v1beta1";
/**
 * Parameters for changing the weights in a balancer pool smoothly from
 * a start weight and end weight over a period of time.
 * Currently, the only smooth change supported is linear changing between
 * the two weights, but more types may be added in the future.
 * When these parameters are set, the weight w(t) for pool time `t` is the
 * following:
 *   t <= start_time: w(t) = initial_pool_weights
 *   start_time < t <= start_time + duration:
 *     w(t) = initial_pool_weights + (t - start_time) *
 *       (target_pool_weights - initial_pool_weights) / (duration)
 *   t > start_time + duration: w(t) = target_pool_weights
 */
export interface SmoothWeightChangeParams {
    /**
     * The start time for beginning the weight change.
     * If a parameter change / pool instantiation leaves this blank,
     * it should be generated by the state_machine as the current time.
     */
    startTime: Timestamp;
    /** Duration for the weights to change over */
    duration: Duration;
    /**
     * The initial pool weights. These are copied from the pool's settings
     * at the time of weight change instantiation.
     * The amount PoolAsset.token.amount field is ignored if present,
     * future type refactorings should just have a type with the denom & weight
     * here.
     */
    initialPoolWeights: PoolAsset[];
    /**
     * The target pool weights. The pool weights will change linearly with respect
     * to time between start_time, and start_time + duration. The amount
     * PoolAsset.token.amount field is ignored if present, future type
     * refactorings should just have a type with the denom & weight here.
     */
    targetPoolWeights: PoolAsset[];
}
/**
 * PoolParams defined the parameters that will be managed by the pool
 * governance in the future. This params are not managed by the chain
 * governance. Instead they will be managed by the token holders of the pool.
 * The pool's token holders are specified in future_pool_governor.
 */
export interface PoolParams {
    swapFee: string;
    /**
     * N.B.: exit fee is disabled during pool creation in x/poolmanager. While old
     * pools can maintain a non-zero fee. No new pool can be created with non-zero
     * fee anymore
     */
    exitFee: string;
    smoothWeightChangeParams?: SmoothWeightChangeParams;
}
/**
 * Pool asset is an internal struct that combines the amount of the
 * token in the pool, and its balancer weight.
 * This is an awkward packaging of data,
 * and should be revisited in a future state migration.
 */
export interface PoolAsset {
    /**
     * Coins we are talking about,
     * the denomination must be unique amongst all PoolAssets for this pool.
     */
    token: Coin;
    /** Weight that is not normalized. This weight must be less than 2^50 */
    weight: string;
}
export interface Pool {
    address: string;
    id: bigint;
    poolParams: PoolParams;
    /**
     * This string specifies who will govern the pool in the future.
     * Valid forms of this are:
     * {token name},{duration}
     * {duration}
     * where {token name} if specified is the token which determines the
     * governor, and if not specified is the LP token for this pool.duration is
     * a time specified as 0w,1w,2w, etc. which specifies how long the token
     * would need to be locked up to count in governance. 0w means no lockup.
     * TODO: Further improve these docs
     */
    futurePoolGovernor: string;
    /** sum of all LP tokens sent out */
    totalShares: Coin;
    /**
     * These are assumed to be sorted by denomiation.
     * They contain the pool asset and the information about the weight
     */
    poolAssets: PoolAsset[];
    /** sum of all non-normalized pool weights */
    totalWeight: string;
}
export declare const SmoothWeightChangeParams: {
    typeUrl: string;
    encode(message: SmoothWeightChangeParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): SmoothWeightChangeParams;
    fromJSON(object: any): SmoothWeightChangeParams;
    toJSON(message: SmoothWeightChangeParams): unknown;
    fromPartial<I extends {
        startTime?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        duration?: {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } | undefined;
        initialPoolWeights?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
        targetPoolWeights?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
    } & {
        startTime?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["startTime"], keyof Timestamp>, never>) | undefined;
        duration?: ({
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: bigint | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["duration"], keyof Duration>, never>) | undefined;
        initialPoolWeights?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["initialPoolWeights"][number]["token"], keyof Coin>, never>) | undefined;
            weight?: string | undefined;
        } & Record<Exclude<keyof I["initialPoolWeights"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["initialPoolWeights"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>, never>) | undefined;
        targetPoolWeights?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["targetPoolWeights"][number]["token"], keyof Coin>, never>) | undefined;
            weight?: string | undefined;
        } & Record<Exclude<keyof I["targetPoolWeights"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["targetPoolWeights"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SmoothWeightChangeParams>, never>>(object: I): SmoothWeightChangeParams;
};
export declare const PoolParams: {
    typeUrl: string;
    encode(message: PoolParams, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): PoolParams;
    fromJSON(object: any): PoolParams;
    toJSON(message: PoolParams): unknown;
    fromPartial<I extends {
        swapFee?: string | undefined;
        exitFee?: string | undefined;
        smoothWeightChangeParams?: {
            startTime?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            duration?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            initialPoolWeights?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            targetPoolWeights?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        swapFee?: string | undefined;
        exitFee?: string | undefined;
        smoothWeightChangeParams?: ({
            startTime?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            duration?: {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } | undefined;
            initialPoolWeights?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            targetPoolWeights?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
        } & {
            startTime?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["smoothWeightChangeParams"]["startTime"], keyof Timestamp>, never>) | undefined;
            duration?: ({
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: bigint | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["smoothWeightChangeParams"]["duration"], keyof Duration>, never>) | undefined;
            initialPoolWeights?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & Record<Exclude<keyof I["smoothWeightChangeParams"]["initialPoolWeights"][number]["token"], keyof Coin>, never>) | undefined;
                weight?: string | undefined;
            } & Record<Exclude<keyof I["smoothWeightChangeParams"]["initialPoolWeights"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["smoothWeightChangeParams"]["initialPoolWeights"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>, never>) | undefined;
            targetPoolWeights?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & Record<Exclude<keyof I["smoothWeightChangeParams"]["targetPoolWeights"][number]["token"], keyof Coin>, never>) | undefined;
                weight?: string | undefined;
            } & Record<Exclude<keyof I["smoothWeightChangeParams"]["targetPoolWeights"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["smoothWeightChangeParams"]["targetPoolWeights"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["smoothWeightChangeParams"], keyof SmoothWeightChangeParams>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PoolParams>, never>>(object: I): PoolParams;
};
export declare const PoolAsset: {
    typeUrl: string;
    encode(message: PoolAsset, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): PoolAsset;
    fromJSON(object: any): PoolAsset;
    toJSON(message: PoolAsset): unknown;
    fromPartial<I extends {
        token?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        weight?: string | undefined;
    } & {
        token?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["token"], keyof Coin>, never>) | undefined;
        weight?: string | undefined;
    } & Record<Exclude<keyof I, keyof PoolAsset>, never>>(object: I): PoolAsset;
};
export declare const Pool: {
    typeUrl: string;
    encode(message: Pool, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Pool;
    fromJSON(object: any): Pool;
    toJSON(message: Pool): unknown;
    fromPartial<I extends {
        address?: string | undefined;
        id?: bigint | undefined;
        poolParams?: {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            smoothWeightChangeParams?: {
                startTime?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                duration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                initialPoolWeights?: {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] | undefined;
                targetPoolWeights?: {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
        futurePoolGovernor?: string | undefined;
        totalShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        poolAssets?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
        totalWeight?: string | undefined;
    } & {
        address?: string | undefined;
        id?: bigint | undefined;
        poolParams?: ({
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            smoothWeightChangeParams?: {
                startTime?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                duration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                initialPoolWeights?: {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] | undefined;
                targetPoolWeights?: {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            smoothWeightChangeParams?: ({
                startTime?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                duration?: {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } | undefined;
                initialPoolWeights?: {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] | undefined;
                targetPoolWeights?: {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] | undefined;
            } & {
                startTime?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["startTime"], keyof Timestamp>, never>) | undefined;
                duration?: ({
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: bigint | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["duration"], keyof Duration>, never>) | undefined;
                initialPoolWeights?: ({
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] & ({
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                } & {
                    token?: ({
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["initialPoolWeights"][number]["token"], keyof Coin>, never>) | undefined;
                    weight?: string | undefined;
                } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["initialPoolWeights"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["initialPoolWeights"], keyof {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[]>, never>) | undefined;
                targetPoolWeights?: ({
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[] & ({
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                } & {
                    token?: ({
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["targetPoolWeights"][number]["token"], keyof Coin>, never>) | undefined;
                    weight?: string | undefined;
                } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["targetPoolWeights"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"]["targetPoolWeights"], keyof {
                    token?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                    weight?: string | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["poolParams"]["smoothWeightChangeParams"], keyof SmoothWeightChangeParams>, never>) | undefined;
        } & Record<Exclude<keyof I["poolParams"], keyof PoolParams>, never>) | undefined;
        futurePoolGovernor?: string | undefined;
        totalShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["totalShares"], keyof Coin>, never>) | undefined;
        poolAssets?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["poolAssets"][number]["token"], keyof Coin>, never>) | undefined;
            weight?: string | undefined;
        } & Record<Exclude<keyof I["poolAssets"][number], keyof PoolAsset>, never>)[] & Record<Exclude<keyof I["poolAssets"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>, never>) | undefined;
        totalWeight?: string | undefined;
    } & Record<Exclude<keyof I, keyof Pool>, never>>(object: I): Pool;
};
