import { BinaryReader, BinaryWriter } from "../../../binary";
export declare const protobufPackage = "ethermint.evm.v1";
/** Params defines the EVM module parameters */
export interface Params {
    /**
     * evm_denom represents the token denomination used to run the EVM state
     * transitions.
     */
    evmDenom: string;
    /** enable_create toggles state transitions that use the vm.Create function */
    enableCreate: boolean;
    /** enable_call toggles state transitions that use the vm.Call function */
    enableCall: boolean;
    /** extra_eips defines the additional EIPs for the vm.Config */
    extraEips: bigint[];
    /** chain_config defines the EVM chain configuration parameters */
    chainConfig: ChainConfig;
    /**
     * allow_unprotected_txs defines if replay-protected (i.e non EIP155
     * signed) transactions can be executed on the state machine.
     */
    allowUnprotectedTxs: boolean;
    /**
     * active_precompiles defines the slice of hex addresses of the precompiled
     * contracts that are active
     */
    activePrecompiles: string[];
    /** evm_channels is the list of channel identifiers from EVM compatible chains */
    evmChannels: string[];
}
/**
 * ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int values
 * instead of *big.Int.
 */
export interface ChainConfig {
    /** homestead_block switch (nil no fork, 0 = already homestead) */
    homesteadBlock: string;
    /** dao_fork_block corresponds to TheDAO hard-fork switch block (nil no fork) */
    daoForkBlock: string;
    /** dao_fork_support defines whether the nodes supports or opposes the DAO hard-fork */
    daoForkSupport: boolean;
    /**
     * eip150_block: EIP150 implements the Gas price changes
     * (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
     */
    eip150Block: string;
    /** eip150_hash: EIP150 HF hash (needed for header only clients as only gas pricing changed) */
    eip150Hash: string;
    /** eip155_block: EIP155Block HF block */
    eip155Block: string;
    /** eip158_block: EIP158 HF block */
    eip158Block: string;
    /** byzantium_block: Byzantium switch block (nil no fork, 0 = already on byzantium) */
    byzantiumBlock: string;
    /** constantinople_block: Constantinople switch block (nil no fork, 0 = already activated) */
    constantinopleBlock: string;
    /** petersburg_block: Petersburg switch block (nil same as Constantinople) */
    petersburgBlock: string;
    /** istanbul_block: Istanbul switch block (nil no fork, 0 = already on istanbul) */
    istanbulBlock: string;
    /** muir_glacier_block: Eip-2384 (bomb delay) switch block (nil no fork, 0 = already activated) */
    muirGlacierBlock: string;
    /** berlin_block: Berlin switch block (nil = no fork, 0 = already on berlin) */
    berlinBlock: string;
    /** london_block: London switch block (nil = no fork, 0 = already on london) */
    londonBlock: string;
    /** arrow_glacier_block: Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated) */
    arrowGlacierBlock: string;
    /** gray_glacier_block: EIP-5133 (bomb delay) switch block (nil = no fork, 0 = already activated) */
    grayGlacierBlock: string;
    /** merge_netsplit_block: Virtual fork after The Merge to use as a network splitter */
    mergeNetsplitBlock: string;
    /** shanghai_block switch block (nil = no fork, 0 = already on shanghai) */
    shanghaiBlock: string;
    /** cancun_block switch block (nil = no fork, 0 = already on cancun) */
    cancunBlock: string;
}
/** State represents a single Storage key value pair item. */
export interface State {
    /** key is the stored key */
    key: string;
    /** value is the stored value for the given key */
    value: string;
}
/**
 * TransactionLogs define the logs generated from a transaction execution
 * with a given hash. It it used for import/export data as transactions are not
 * persisted on blockchain state after an upgrade.
 */
export interface TransactionLogs {
    /** hash of the transaction */
    hash: string;
    /** logs is an array of Logs for the given transaction hash */
    logs: Log[];
}
/**
 * Log represents an protobuf compatible Ethereum Log that defines a contract
 * log event. These events are generated by the LOG opcode and stored/indexed by
 * the node.
 *
 * NOTE: address, topics and data are consensus fields. The rest of the fields
 * are derived, i.e. filled in by the nodes, but not secured by consensus.
 */
export interface Log {
    /** address of the contract that generated the event */
    address: string;
    /** topics is a list of topics provided by the contract. */
    topics: string[];
    /** data which is supplied by the contract, usually ABI-encoded */
    data: Uint8Array;
    /** block_number of the block in which the transaction was included */
    blockNumber: bigint;
    /** tx_hash is the transaction hash */
    txHash: string;
    /** tx_index of the transaction in the block */
    txIndex: bigint;
    /** block_hash of the block in which the transaction was included */
    blockHash: string;
    /** index of the log in the block */
    index: bigint;
    /**
     * removed is true if this log was reverted due to a chain
     * reorganisation. You must pay attention to this field if you receive logs
     * through a filter query.
     */
    removed: boolean;
}
/** TxResult stores results of Tx execution. */
export interface TxResult {
    /**
     * contract_address contains the ethereum address of the created contract (if
     * any). If the state transition is an evm.Call, the contract address will be
     * empty.
     */
    contractAddress: string;
    /** bloom represents the bloom filter bytes */
    bloom: Uint8Array;
    /**
     * tx_logs contains the transaction hash and the proto-compatible ethereum
     * logs.
     */
    txLogs: TransactionLogs;
    /** ret defines the bytes from the execution. */
    ret: Uint8Array;
    /** reverted flag is set to true when the call has been reverted */
    reverted: boolean;
    /** gas_used notes the amount of gas consumed while execution */
    gasUsed: bigint;
}
/** AccessTuple is the element type of an access list. */
export interface AccessTuple {
    /** address is a hex formatted ethereum address */
    address: string;
    /** storage_keys are hex formatted hashes of the storage keys */
    storageKeys: string[];
}
/** TraceConfig holds extra parameters to trace functions. */
export interface TraceConfig {
    /** tracer is a custom javascript tracer */
    tracer: string;
    /**
     * timeout overrides the default timeout of 5 seconds for JavaScript-based tracing
     * calls
     */
    timeout: string;
    /** reexec defines the number of blocks the tracer is willing to go back */
    reexec: bigint;
    /** disable_stack switches stack capture */
    disableStack: boolean;
    /** disable_storage switches storage capture */
    disableStorage: boolean;
    /** debug can be used to print output during capture end */
    debug: boolean;
    /** limit defines the maximum length of output, but zero means unlimited */
    limit: number;
    /** overrides can be used to execute a trace using future fork rules */
    overrides?: ChainConfig;
    /** enable_memory switches memory capture */
    enableMemory: boolean;
    /** enable_return_data switches the capture of return data */
    enableReturnData: boolean;
    /** tracer_json_config configures the tracer using a JSON string */
    tracerJsonConfig: string;
}
export declare const Params: {
    typeUrl: string;
    encode(message: Params, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        evmDenom?: string | undefined;
        enableCreate?: boolean | undefined;
        enableCall?: boolean | undefined;
        extraEips?: bigint[] | undefined;
        chainConfig?: {
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            grayGlacierBlock?: string | undefined;
            mergeNetsplitBlock?: string | undefined;
            shanghaiBlock?: string | undefined;
            cancunBlock?: string | undefined;
        } | undefined;
        allowUnprotectedTxs?: boolean | undefined;
        activePrecompiles?: string[] | undefined;
        evmChannels?: string[] | undefined;
    } & {
        evmDenom?: string | undefined;
        enableCreate?: boolean | undefined;
        enableCall?: boolean | undefined;
        extraEips?: (bigint[] & bigint[] & Record<Exclude<keyof I["extraEips"], keyof bigint[]>, never>) | undefined;
        chainConfig?: ({
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            grayGlacierBlock?: string | undefined;
            mergeNetsplitBlock?: string | undefined;
            shanghaiBlock?: string | undefined;
            cancunBlock?: string | undefined;
        } & {
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            grayGlacierBlock?: string | undefined;
            mergeNetsplitBlock?: string | undefined;
            shanghaiBlock?: string | undefined;
            cancunBlock?: string | undefined;
        } & Record<Exclude<keyof I["chainConfig"], keyof ChainConfig>, never>) | undefined;
        allowUnprotectedTxs?: boolean | undefined;
        activePrecompiles?: (string[] & string[] & Record<Exclude<keyof I["activePrecompiles"], keyof string[]>, never>) | undefined;
        evmChannels?: (string[] & string[] & Record<Exclude<keyof I["evmChannels"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
};
export declare const ChainConfig: {
    typeUrl: string;
    encode(message: ChainConfig, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): ChainConfig;
    fromJSON(object: any): ChainConfig;
    toJSON(message: ChainConfig): unknown;
    fromPartial<I extends {
        homesteadBlock?: string | undefined;
        daoForkBlock?: string | undefined;
        daoForkSupport?: boolean | undefined;
        eip150Block?: string | undefined;
        eip150Hash?: string | undefined;
        eip155Block?: string | undefined;
        eip158Block?: string | undefined;
        byzantiumBlock?: string | undefined;
        constantinopleBlock?: string | undefined;
        petersburgBlock?: string | undefined;
        istanbulBlock?: string | undefined;
        muirGlacierBlock?: string | undefined;
        berlinBlock?: string | undefined;
        londonBlock?: string | undefined;
        arrowGlacierBlock?: string | undefined;
        grayGlacierBlock?: string | undefined;
        mergeNetsplitBlock?: string | undefined;
        shanghaiBlock?: string | undefined;
        cancunBlock?: string | undefined;
    } & {
        homesteadBlock?: string | undefined;
        daoForkBlock?: string | undefined;
        daoForkSupport?: boolean | undefined;
        eip150Block?: string | undefined;
        eip150Hash?: string | undefined;
        eip155Block?: string | undefined;
        eip158Block?: string | undefined;
        byzantiumBlock?: string | undefined;
        constantinopleBlock?: string | undefined;
        petersburgBlock?: string | undefined;
        istanbulBlock?: string | undefined;
        muirGlacierBlock?: string | undefined;
        berlinBlock?: string | undefined;
        londonBlock?: string | undefined;
        arrowGlacierBlock?: string | undefined;
        grayGlacierBlock?: string | undefined;
        mergeNetsplitBlock?: string | undefined;
        shanghaiBlock?: string | undefined;
        cancunBlock?: string | undefined;
    } & Record<Exclude<keyof I, keyof ChainConfig>, never>>(object: I): ChainConfig;
};
export declare const State: {
    typeUrl: string;
    encode(message: State, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): State;
    fromJSON(object: any): State;
    toJSON(message: State): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & Record<Exclude<keyof I, keyof State>, never>>(object: I): State;
};
export declare const TransactionLogs: {
    typeUrl: string;
    encode(message: TransactionLogs, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): TransactionLogs;
    fromJSON(object: any): TransactionLogs;
    toJSON(message: TransactionLogs): unknown;
    fromPartial<I extends {
        hash?: string | undefined;
        logs?: {
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: bigint | undefined;
            txHash?: string | undefined;
            txIndex?: bigint | undefined;
            blockHash?: string | undefined;
            index?: bigint | undefined;
            removed?: boolean | undefined;
        }[] | undefined;
    } & {
        hash?: string | undefined;
        logs?: ({
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: bigint | undefined;
            txHash?: string | undefined;
            txIndex?: bigint | undefined;
            blockHash?: string | undefined;
            index?: bigint | undefined;
            removed?: boolean | undefined;
        }[] & ({
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: bigint | undefined;
            txHash?: string | undefined;
            txIndex?: bigint | undefined;
            blockHash?: string | undefined;
            index?: bigint | undefined;
            removed?: boolean | undefined;
        } & {
            address?: string | undefined;
            topics?: (string[] & string[] & Record<Exclude<keyof I["logs"][number]["topics"], keyof string[]>, never>) | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: bigint | undefined;
            txHash?: string | undefined;
            txIndex?: bigint | undefined;
            blockHash?: string | undefined;
            index?: bigint | undefined;
            removed?: boolean | undefined;
        } & Record<Exclude<keyof I["logs"][number], keyof Log>, never>)[] & Record<Exclude<keyof I["logs"], keyof {
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: bigint | undefined;
            txHash?: string | undefined;
            txIndex?: bigint | undefined;
            blockHash?: string | undefined;
            index?: bigint | undefined;
            removed?: boolean | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof TransactionLogs>, never>>(object: I): TransactionLogs;
};
export declare const Log: {
    typeUrl: string;
    encode(message: Log, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): Log;
    fromJSON(object: any): Log;
    toJSON(message: Log): unknown;
    fromPartial<I extends {
        address?: string | undefined;
        topics?: string[] | undefined;
        data?: Uint8Array | undefined;
        blockNumber?: bigint | undefined;
        txHash?: string | undefined;
        txIndex?: bigint | undefined;
        blockHash?: string | undefined;
        index?: bigint | undefined;
        removed?: boolean | undefined;
    } & {
        address?: string | undefined;
        topics?: (string[] & string[] & Record<Exclude<keyof I["topics"], keyof string[]>, never>) | undefined;
        data?: Uint8Array | undefined;
        blockNumber?: bigint | undefined;
        txHash?: string | undefined;
        txIndex?: bigint | undefined;
        blockHash?: string | undefined;
        index?: bigint | undefined;
        removed?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Log>, never>>(object: I): Log;
};
export declare const TxResult: {
    typeUrl: string;
    encode(message: TxResult, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): TxResult;
    fromJSON(object: any): TxResult;
    toJSON(message: TxResult): unknown;
    fromPartial<I extends {
        contractAddress?: string | undefined;
        bloom?: Uint8Array | undefined;
        txLogs?: {
            hash?: string | undefined;
            logs?: {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: bigint | undefined;
                txHash?: string | undefined;
                txIndex?: bigint | undefined;
                blockHash?: string | undefined;
                index?: bigint | undefined;
                removed?: boolean | undefined;
            }[] | undefined;
        } | undefined;
        ret?: Uint8Array | undefined;
        reverted?: boolean | undefined;
        gasUsed?: bigint | undefined;
    } & {
        contractAddress?: string | undefined;
        bloom?: Uint8Array | undefined;
        txLogs?: ({
            hash?: string | undefined;
            logs?: {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: bigint | undefined;
                txHash?: string | undefined;
                txIndex?: bigint | undefined;
                blockHash?: string | undefined;
                index?: bigint | undefined;
                removed?: boolean | undefined;
            }[] | undefined;
        } & {
            hash?: string | undefined;
            logs?: ({
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: bigint | undefined;
                txHash?: string | undefined;
                txIndex?: bigint | undefined;
                blockHash?: string | undefined;
                index?: bigint | undefined;
                removed?: boolean | undefined;
            }[] & ({
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: bigint | undefined;
                txHash?: string | undefined;
                txIndex?: bigint | undefined;
                blockHash?: string | undefined;
                index?: bigint | undefined;
                removed?: boolean | undefined;
            } & {
                address?: string | undefined;
                topics?: (string[] & string[] & Record<Exclude<keyof I["txLogs"]["logs"][number]["topics"], keyof string[]>, never>) | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: bigint | undefined;
                txHash?: string | undefined;
                txIndex?: bigint | undefined;
                blockHash?: string | undefined;
                index?: bigint | undefined;
                removed?: boolean | undefined;
            } & Record<Exclude<keyof I["txLogs"]["logs"][number], keyof Log>, never>)[] & Record<Exclude<keyof I["txLogs"]["logs"], keyof {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: bigint | undefined;
                txHash?: string | undefined;
                txIndex?: bigint | undefined;
                blockHash?: string | undefined;
                index?: bigint | undefined;
                removed?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["txLogs"], keyof TransactionLogs>, never>) | undefined;
        ret?: Uint8Array | undefined;
        reverted?: boolean | undefined;
        gasUsed?: bigint | undefined;
    } & Record<Exclude<keyof I, keyof TxResult>, never>>(object: I): TxResult;
};
export declare const AccessTuple: {
    typeUrl: string;
    encode(message: AccessTuple, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): AccessTuple;
    fromJSON(object: any): AccessTuple;
    toJSON(message: AccessTuple): unknown;
    fromPartial<I extends {
        address?: string | undefined;
        storageKeys?: string[] | undefined;
    } & {
        address?: string | undefined;
        storageKeys?: (string[] & string[] & Record<Exclude<keyof I["storageKeys"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AccessTuple>, never>>(object: I): AccessTuple;
};
export declare const TraceConfig: {
    typeUrl: string;
    encode(message: TraceConfig, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): TraceConfig;
    fromJSON(object: any): TraceConfig;
    toJSON(message: TraceConfig): unknown;
    fromPartial<I extends {
        tracer?: string | undefined;
        timeout?: string | undefined;
        reexec?: bigint | undefined;
        disableStack?: boolean | undefined;
        disableStorage?: boolean | undefined;
        debug?: boolean | undefined;
        limit?: number | undefined;
        overrides?: {
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            grayGlacierBlock?: string | undefined;
            mergeNetsplitBlock?: string | undefined;
            shanghaiBlock?: string | undefined;
            cancunBlock?: string | undefined;
        } | undefined;
        enableMemory?: boolean | undefined;
        enableReturnData?: boolean | undefined;
        tracerJsonConfig?: string | undefined;
    } & {
        tracer?: string | undefined;
        timeout?: string | undefined;
        reexec?: bigint | undefined;
        disableStack?: boolean | undefined;
        disableStorage?: boolean | undefined;
        debug?: boolean | undefined;
        limit?: number | undefined;
        overrides?: ({
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            grayGlacierBlock?: string | undefined;
            mergeNetsplitBlock?: string | undefined;
            shanghaiBlock?: string | undefined;
            cancunBlock?: string | undefined;
        } & {
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            grayGlacierBlock?: string | undefined;
            mergeNetsplitBlock?: string | undefined;
            shanghaiBlock?: string | undefined;
            cancunBlock?: string | undefined;
        } & Record<Exclude<keyof I["overrides"], keyof ChainConfig>, never>) | undefined;
        enableMemory?: boolean | undefined;
        enableReturnData?: boolean | undefined;
        tracerJsonConfig?: string | undefined;
    } & Record<Exclude<keyof I, keyof TraceConfig>, never>>(object: I): TraceConfig;
};
